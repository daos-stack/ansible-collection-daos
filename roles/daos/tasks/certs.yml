---
# certificate generation tasks for the daos role

- name: Generate self signed certificates
  ansible.builtin.command:
  args:
    cmd: "{{ daos_certs_gen_script_path }}"
    chdir: "{{ daos_certs_gen_dir }}"
    creates: "{{ daos_certs_gen_CA_dir }}"
  when: (daos_certs_gen_enable | default(false) | bool) and
        inventory_hostname == groups['daos_admins'][0]

- name: Create certs directory
  ansible.builtin.file:
    path: "{{ daos_certs_dir }}"
    state: directory
    mode: '0755'

- name: Create client certs directory (server)
  ansible.builtin.file:
    path: "{{ daos_certs_dir }}/clients"
    state: directory
    mode: '0755'
  when: daos_role_server in daos_roles

- name: Create admin certs directory (admin)
  ansible.builtin.file:
    path: "{{ daos_admin_certs_dir }}"
    state: directory
    owner: "{{ daos_admin_user }}"
    group: "{{ daos_admin_user }}"
    mode: '0755'
  when: daos_role_admin in daos_roles

- name: Copy server certs
  ansible.builtin.synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: false
    group: false
    perms: false
    times: false
    checksum: true
    verify_host: false
    mode: push
  loop:
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/daosCA.crt",
        dest: "/etc/daos/certs/daosCA.crt"
      }
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/server.crt",
        dest: "/etc/daos/certs/server.crt"
      }
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/server.key",
        dest: "/etc/daos/certs/server.key"
      }
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/agent.crt",
        dest: "/etc/daos/certs/clients/agent.crt"
      }
  loop_control:
    label: "{{ item.dest }}"
  delegate_to: "{{ groups['daos_admins'][0] }}"
  when: daos_role_server in daos_roles

- name: Copy client certs
  ansible.builtin.synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: false
    group: false
    perms: false
    times: false
    checksum: true
    verify_host: false
    mode: push
  loop:
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/daosCA.crt",
        dest: "/etc/daos/certs/daosCA.crt"
      }
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/agent.crt",
        dest: "/etc/daos/certs/agent.crt"
      }
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/agent.key",
        dest: "/etc/daos/certs/agent.key"
      }
  loop_control:
    label: "{{ item.dest }}"
  delegate_to: "{{ groups['daos_admins'][0] }}"
  when: daos_role_client in daos_roles

- name: Copy admin certs
  ansible.builtin.synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: false
    group: false
    perms: false
    times: false
    checksum: true
    verify_host: false
    mode: push
  loop:
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/daosCA.crt",
        dest: "{{ daos_admin_certs_dir }}/daosCA.crt"
      }
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/admin.crt",
        dest: "{{ daos_admin_certs_dir }}/admin.crt"
      }
    - {
        src: "{{ daos_certs_gen_CA_dir }}/certs/admin.key",
        dest: "{{ daos_admin_certs_dir }}/admin.key"
      }
  loop_control:
    label: "{{ item.dest }}"
  delegate_to: "{{ groups['daos_admins'][0] }}"
  when: daos_role_admin in daos_roles

- name: Set cert permissions (DAOS server)
  ansible.builtin.file:
    path: /etc/daos/certs
    state: directory
    recurse: yes
    owner: "{{ ansible_local.daos.iommu_enabled | ternary(daos_server_user, 'root') }}"
    group: "{{ ansible_local.daos.iommu_enabled | ternary(daos_server_user, 'root') }}"
  when: daos_role_server in daos_roles

- name: Set cert permissions (DAOS client)
  ansible.builtin.file:
    path: /etc/daos/certs
    state: directory
    recurse: yes
    owner: "{{ daos_agent_user }}"
    group: "{{ daos_agent_user }}"
  when: daos_role_client in daos_roles

- name: Set cert permissions (DAOS admin)
  ansible.builtin.file:
    path: "{{ daos_admin_certs_dir }}"
    state: directory
    recurse: yes
    owner: "{{ daos_admin_user }}"
    group: "{{ daos_admin_user }}"
  when: daos_role_admin in daos_roles
