---
# storage administration tasks for the daos role

- name: Set fact containing ip addresses of all servers
  ansible.builtin.set_fact:
    daos_server_ips: "{{ groups['daos_servers'] | map('extract', hostvars, ['ansible_host']) | join(',') }}"

# Flush handlers here because we need all services to be started before continuing
- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure that the daos_server service is started
  ansible.builtin.service:
    name: daos_server
    state: started
  when: daos_role_server in daos_roles

- name: Ensure that the daos_agent service is started
  ansible.builtin.service:
    name: daos_agent
    state: started
  when: daos_role_client in daos_roles

# FIX: This is very fragile.
#      https://daosio.atlassian.net/browse/DAOS-12293
- name: Determine if system is initialized
  ansible.builtin.shell: |
    set -o pipefail
    if dmg system query -o {{ daos_admin_config_dir }}/daos_control.yml -v -j 2>/dev/null | jq -r '.error' | grep -q "system is uninitialized"; then
      echo true
    else
      echo false
    fi
  become_user: "{{ daos_admin_user }}"
  changed_when: false
  when: inventory_hostname == groups['daos_admins'][0]
  register: daos_format_needed

- name: Format storage
  ansible.builtin.command: "dmg storage format -o {{ daos_admin_config_dir }}/daos_control.yml -l '{{ daos_server_ips }}'"
  become_method: su
  become_user: "{{ daos_admin_user }}"
  when: (inventory_hostname == groups['daos_admins'][0]) and
        (daos_do_storage_format | bool) and
        (daos_format_needed.stdout | bool)

# After running 'dmg storage format' running 'dmg system query' will block until
# the system is initialized. We should not go on until all of the servers have
# joined.
- name: Wait for system to initialize
  # no command-instead-of-shell
  ansible.builtin.shell: |
    set -o pipefail
    dmg system query -o /home/daos_admin/daos/daos_control.yml -j | jq -r '.response.members[]|select(.state=="joined")|.fault_domain'
  become_method: su
  become_user: "{{ daos_admin_user }}"
  register: daos_joined_servers
  until: daos_joined_servers.stdout_lines | length == groups['daos_servers'] | length
  delay: 5
  retries: 10
  when: inventory_hostname == groups['daos_admins'][0]
  changed_when: false

- name: Create pools
  ansible.builtin.shell: |
    set -o pipefail
    if [[ ! $(dmg pool list -o /home/daos_admin/daos/daos_control.yml -j | jq -r '.response.pools[] | select(.label=="{{ pool.label }}") | .label') == "{{ pool.label }}" ]]; then
      dmg pool create -o {{ daos_admin_config_dir }}/daos_control.yml -z {{ pool.size }} -t {{ pool.tier_ratio }} -u {{ pool.user }} --label="{{ pool.label }}"
      dmg pool set-prop "{{ pool.label }}" -o {{ daos_admin_config_dir }}/daos_control.yml --name=reclaim --value=disabled
      {% for acl in pool.acls %}
        dmg pool update-acl -o {{ daos_admin_config_dir }}/daos_control.yml -e "{{ acl }}" {{ pool.label }}
      {% endfor %}
    else
      echo "False"
    fi
  become_method: su
  become_user: "{{ daos_admin_user }}"
  register: daos_created_pools
  changed_when: not daos_created_pools.stdout | bool
  loop: "{{ daos_pools }}"
  loop_control:
    loop_var: pool
  when: inventory_hostname == groups['daos_admins'][0]
