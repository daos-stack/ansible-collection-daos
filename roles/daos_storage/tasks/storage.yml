---
# storage management tasks for daos_storage role

# Flush handlers here because we need all services to be started before continuing
- name: storage | Flush handlers
  ansible.builtin.meta: flush_handlers

- name: storage | Ensure that the daos_server service is started
  ansible.builtin.service:
    name: daos_server
    state: started
  register: daos_storage_daos_server_service_state

- name: storage | Check daos_server service started
  assert:
    that:
      - daos_storage_daos_server_service_state is success
    fail_msg: "Failed to start daos_server service!"

- name: storage | Wait for daos port
  ansible.builtin.wait_for:
    port: "{{ daos_port | default('10001') }}"
    state: started
    delay: 5
    sleep: 2
    timeout: 300
  become: false
  changed_when: false

# FIX: This is very fragile!
#      https://daosio.atlassian.net/browse/DAOS-12293
- name: storage | Determine if storage needs to be formatted
  ansible.builtin.shell: |
    set -o pipefail
    dmg system query -v -j --rank-hosts="{{ ansible_hostname }}" 2>/dev/null | jq -r '.error'
  changed_when: false
  register: daos_format_needed
  failed_when: (daos_format_needed.rc == 1) and
    ("system is uninitialized (storage format required?)" not in daos_format_needed.stdout)

- name: storage | Show output from dmg system query command
  ansible.builtin.debug:
    var: daos_format_needed

- name: storage | Create comma separated host list
  set_fact:
    daos_storage_server_hostlist_csv: "{{ daos_storage_server_host_list | map('regex_replace', '^(.*)$', '\"\\1\"') | join(', ') }}"

# - name: storage | Format storage (local)
#   # noqa no-changed-when
#   ansible.builtin.shell: |
#     dmg storage format --host-list='127.0.0.1'
#   when:
#     - daos_storage_do_format
#     - ("system is uninitialized (storage format required?)" in daos_format_needed.stdout)
#     - ansible_connection == "local"

- name: storage | Format storage (remote)
  # noqa no-changed-when --host-list={{ daos_storage_server_hostlist_csv }}
  ansible.builtin.shell: |
    dmg storage format -l {{ ansible_hostname }}
  when:
    - daos_storage_do_format
    - ("system is uninitialized (storage format required?)" in daos_format_needed.stdout)
    #- ansible_connection != "local"

# - name: storage | Wait for storage system to be initialized
#   # noqa no-changed-when
#   ansible.builtin.shell: dmg system query -v
#   #when: daos_storage_do_management

- name: DEBUG daos_storage_server_host_list
  debug:
    var: daos_storage_server_host_list

- name: DEBUG daos_storage_server_host_list | length
  debug:
    msg: "{{ daos_storage_server_host_list | length }}"

# After running 'dmg storage format' running 'dmg system query -v' will block until
# the system is initialized. Do not continue until the server has joined.
- name: storage | Wait for host to join
  # no command-instead-of-shell
  ansible.builtin.shell: |
    set -o pipefail
    dmg system query -v -j --rank-hosts="{{ ansible_hostname }}" | jq -r --arg hostname "/"{{ ansible_hostname }}"" '.response.members[] | select(.fault_domain == $hostname).state'
  register: daos_join_state
  until: daos_join_state.stdout_lines | lower == "joined"
  delay: 5
  retries: 30
  changed_when: false
  when: daos_storage_do_format

- name: storage | Get join status for all hosts
  # no command-instead-of-shell
  ansible.builtin.shell: |
    set -o pipefail
    dmg system query -v -j | jq -r '.response.members[] | select(.state == "joined").fault_domain' | sed 's|/||g' | wc -l
  register: daos_server_join_count
  until: daos_server_join_count.stdout_lines | int == daos_storage_server_host_list | length
  delay: 5
  retries: 60
  changed_when: false
  when: daos_storage_do_management

- name: Pause for 2 mins
  ansible.builtin.pause:
    seconds: 120
  when: daos_storage_do_management

- name: storage | Create pools
  ansible.builtin.shell: |
    set -o pipefail
    if [[ ! $(dmg pool list -j | jq -r '.response.pools[] | select(.label=="{{ pool.label }}") | .label') == "{{ pool.label }}" ]]; then
      dmg pool create -z {{ pool.size }} -u {{ pool.user }} "{{ pool.label }}"
      dmg pool set-prop "{{ pool.label }}" --name=reclaim --value=disabled
      {% for acl in pool.acls %}
        dmg pool update-acl -e "{{ acl }}" {{ pool.label }}
      {% endfor %}
    fi
  register: daos_created_pools
  changed_when: '"Pool created" in daos_created_pools.stdout'
  loop: "{{ daos_pools }}"
  loop_control:
    loop_var: pool
  when: daos_storage_do_management
