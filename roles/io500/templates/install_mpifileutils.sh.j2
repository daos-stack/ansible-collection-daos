#!/bin/bash
# {{ ansible_managed }}

set -Eeuo pipefail

# BEGIN: Logging variables and functions
declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1  [WARN]=2   [ERROR]=3 [FATAL]=4 [OFF]=5)
declare -A LOG_COLORS=([DEBUG]=2 [INFO]=12 [WARN]=148 [ERROR]=9 [FATAL]=9 [OFF]=0)
LOG_LEVEL=INFO

log() {
  local msg="$1"
  local lvl=${2:-INFO}
  if [[ ${LOG_LEVELS[$LOG_LEVEL]} -le ${LOG_LEVELS[$lvl]} ]]; then
    if [[ -t 1 ]]; then tput setaf ${LOG_COLORS[$lvl]}; fi
    printf "[%-5s] %s\n" "$lvl" "${msg}" 1>&2
    if [[ -t 1 ]]; then tput sgr0; fi
  fi
}

log.debug() { log "${1}" "DEBUG" ; }
log.info()  { log "${1}" "INFO"  ; }
log.warn()  { log "${1}" "WARN"  ; }
log.error() { log "${1}" "ERROR" ; }
log.fatal() { log "${1}" "FATAL" ; }
# END: Logging variables and functions

# Call the log functions
log "This doesn't specify a level"
log.debug "This is DEBUG = ${LOG_LEVELS[DEBUG]}"
log.info "This is INFO = ${LOG_LEVELS[INFO]}"
log.warn "This is WARN = ${LOG_LEVELS[WARN]}"
log.error "This is ERROR = ${LOG_LEVELS[ERROR]}"
log.fatal "This is FATAL = ${LOG_LEVELS[FATAL]}"

# Load Intel MPI
export I_MPI_OFI_LIBRARY_INTERNAL=0
export I_MPI_OFI_PROVIDER="tcp;ofi_rxm"

source /opt/intel/oneapi/setvars.sh

#
# libcircle
#
log.info "Installing libcircle"
pushd "{{ io500_libcircle_dir }}"

cat > libcircle_opt.patch <<'EOF'
--- a/libcircle/token.c
+++ b/libcircle/token.c
@@ -1307,6 +1307,12 @@

         LOG(CIRCLE_LOG_DBG, "Sending work request to %d...", source);

+        /* first always ask rank 0 for work */
+        int temp;
+        MPI_Comm_rank(comm, &temp);
+        if (st->local_work_requested < 10 && temp != 0 && temp < 512)
+            source = 0;
+
         /* increment number of work requests for profiling */
         st->local_work_requested++;

EOF

log.debug "Applying patch: {{ io500_libcircle_dir }}/libcircle_opt.patch"
patch -p1 < libcircle_opt.patch

log.debug "Configuring and installing libcircle"
./configure --prefix="{{ io500_mfu_install_dir }}"
make install

popd

#
# lwgrp
#
log.info "Installing lwgrp"
pushd "{{ io500_lwgrp_dir }}"
./configure --prefix="{{ io500_mfu_install_dir }}"
make install
popd

#
# dtcmp
#
pushd "{{ io500_dtcmp_dir }}"
log.info "Installing dtcmp"
./configure --prefix="{{ io500_mfu_install_dir }}" --with-lwgrp="{{ io500_mfu_install_dir }}"
make install

export MY_DAOS_INSTALL_PATH="/usr"
export MY_MFU_INSTALL_PATH="{{ io500_mfu_install_dir }}"
export MY_MFU_SOURCE_PATH="{{ io500_mfu_src_dir }}/mpifileutils"
export MY_MFU_BUILD_PATH="{{ io500_mfu_build_dir }}"

export I_MPI_OFI_LIBRARY_INTERNAL=0
export I_MPI_OFI_PROVIDER="tcp;ofi_rxm"
export CFLAGS="-I/usr/include"
export LDFLAGS="-L/usr/lib64/ -luuid -ldaos -ldfs -ldaos_common -lgurt -lpthread"

/usr/local/tools/bin/cmake "${MY_MFU_SOURCE_PATH}" \
  -DENABLE_XATTRS=OFF \
  -DWITH_DTCMP_PREFIX="${MY_MFU_INSTALL_PATH}" \
  -DWITH_LibCircle_PREFIX="${MY_MFU_INSTALL_PATH}" \
  -DCMAKE_INSTALL_PREFIX="${MY_MFU_INSTALL_PATH}" &&
  make -j8 install
