---
# cert permissions tasks file for daos_certs role

# These tasks might run on admin, client or server node.
# They might run before or after daos is installed.
#
# The ownership of the cert files depends on a few different scenarios.
# If the daos_server.service and daos_agent.service files exist on the
# system then the owner of the certs should be set to the value of the User
# setting in the service files.
# If the service files don't exist then check to see if the daos_server and
# daos_agent users exist and set the ownership of certs files accordingly.
# If the service files don't exist then and the daos_server and
# daos_agent users don't exist, set the ownership of certs files to root.
- name: Stat daos_agent.service file
  ansible.builtin.stat:
    path: "{{ daos_certs_daos_agent_service_file }}"
  register: daos_certs_agent_service_file

- name: Set daos_agent user from daos_agent.service file
  block:
    - name: Read content from daos_agent.service file
      shell: "grep '^User=' {{ daos_certs_daos_agent_service_file }} | awk -F'=' '{print $2}'"
      register: daos_certs_agent_service_file_user_grep

    - name: Check for existence of daos_agent.service file user
      command: id -u "{{ daos_certs_agent_service_file_user_grep.stdout }}"
      register: daos_certs_service_file_user_check
      failed_when: false
      changed_when: false

    - name: Set daos_certs_daos_agent_user fact to daos_agent.service file user
      set_fact:
        daos_certs_daos_agent_user: "{{ daos_certs_agent_service_file_user_grep.stdout }}"
      when: daos_certs_service_file_user_check.rc == 0

    - name: Set daos_certs_daos_agent_user to root
      set_fact:
        daos_certs_daos_agent_user: root
      when: daos_certs_service_file_user_check.rc == 1

  when:
    - daos_certs_agent_service_file_stat.stat is defined
    - daos_certs_agent_service_file_stat.stat.exists

- name: Set daos_agent user when daos_agent.service file doesn't exist
  block:
    - name: Check for existence of daos_agent user
      command: id -u daos_agent
      register: daos_certs_daos_agent_user_check
      failed_when: false
      changed_when: false

    - name: Set daos_certs_daos_agent_user fact to daos_agent
      set_fact:
        daos_certs_daos_agent_user: "daos_agent"
      when: daos_certs_daos_agent_user_check.rc == 0

    - name: Set daos_certs_daos_agent_user to root
      set_fact:
        daos_certs_daos_agent_user: root
      when: daos_certs_daos_agent_user_check.rc == 1
  when:
    - daos_certs_agent_service_file_stat.stat is not defined or not daos_certs_agent_service_file_stat.stat.exists

- name: Check if cert dirs and files exist
  ansible.builtin.stat:
    path: "{{ daos_certs_cert_path.path }}"
  register: daos_certs_paths
  loop:
    - { path: "/etc/daos/certs", owner: "{{ daos_certs_daos_server_user | default('root') }}", mode: '755' }
    - { path: "/etc/daos/certs/clients", owner: "{{ daos_certs_daos_server_user | default('root') }}", mode: '750' }
    - { path: "/etc/daos/certs/daosCA.crt", owner: "{{ daos_certs_daos_server_user | default('root') }}", mode: '0644' }
    - { path: "/etc/daos/certs/admin.crt", owner: "root", mode: '0644' }
    - { path: "/etc/daos/certs/admin.key", owner: "root", mode: '0400' }
    - { path: "/etc/daos/certs/clients/agent.crt", owner: "{{ daos_certs_daos_server_user | default('root') }}", mode: '0644' }
    - { path: "/etc/daos/certs/agent.crt", owner: "{{ daos_certs_daos_agent_user | default('root') }}", mode: '0644' }
    - { path: "/etc/daos/certs/agent.key", owner: "{{ daos_certs_daos_agent_user | default('root') }}", mode: '0400' }
    - { path: "/etc/daos/certs/server.crt", owner: "{{ daos_certs_daos_server_user | default('root') }}", mode: '0644' }
    - { path: "/etc/daos/certs/server.key", owner: "{{ daos_certs_daos_server_user | default('root') }}", mode: '0400' }
  loop_control:
    loop_var: daos_certs_cert_path

- name: Set permissions on cert dirs and files
  ansible.builtin.file:
    path: "{{ item.daos_certs_cert_path.path }}"
    owner: "{{ item.daos_certs_cert_path.owner | default('root') }}"
    group: "{{ item.daos_certs_cert_path.group | default(item.daos_certs_cert_path.owner) | default('root') }}"
    mode: "{{ item.daos_certs_cert_path.mode }}"
  loop: "{{ daos_certs_paths.results }}"
  loop_control:
    label: "{{ item.daos_certs_cert_path.path }}"
  register: daos_certs_path_permissions
  when:
    - item.stat is defined
    - item.stat.exists
