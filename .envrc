#!/usr/bin/env bash
#
# .envrc for direnv
# See https://direnv.net/
#
# Drop this file in any directory where you want your virtual env to load
# automatically when you cd into the directory.
#
# If the directory containing this .envrc file does not exist within a
# parent directory which has been whitelisted in the
# ~/.config/direnv/direnv.toml config file, then you will be prompted to
# run `direnv allow` the first time you cd into the directory.
#
# After running `direnv allow` direnv will run this .envrc script every time
# you enter the directory.
#
# If there is a requirements-dev.txt file in the same directory as this .envrc
# file the .envrc will run `pip install -r requirements-dev.txt` when the
# virtualenv is first created.
# If a requirements-dev.txt file doesn't exist the .envrc will
# look for a requirements.txt file and use that to install pip packages.
#
# If there is a .pre-commit-config.yaml file in the same directory as this
# .envrc file, then pre-commit will be installed (if it's not already installed).
# After installing pre-commit the `pre-commit install` command will be run in
# order to install the pre-commit hooks.
#
# When direnv runs this .envrc script it will load functions that can be used
# in this script. The set of functions are called the direnv-stdlib.
# See https://direnv.net/man/direnv-stdlib.1.html
#

VERSION=3

SCRIPT_DIR="$(realpath "$(dirname $0)")"
SCRIPT_FILE=$(basename "${BASH_SOURCE[0]}")
CUR_DIR=$(pwd)

: "${MY_PROJECT_DIR="${CUR_DIR}"}"
: "${MY_VENV_ENABLE=1}"  # Enable automatic venv creation and loading 1=True 0=False
: "${MY_VENV_ROOT="${HOME}/.virtualenvs"}"
: "${MY_VENV_DIR="${MY_VENV_ROOT}${MY_PROJECT_DIR}/venv"}"

# BEGIN: Logging variables and functions
: "${LOG_LEVEL="INFO"}"
declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3 [FATAL]=4 [OFF]=5)
declare -A LOG_COLORS=([DEBUG]='\e[32m' [INFO]='\e[94m' [WARN]='\e[93m' [ERROR]='\e[31m' [FATAL]='\e[91m' [OTHER]='\e[37m' [OFF]='\e[0m')
tty -s || for l in "${!LOG_LEVELS[@]}"; do LOG_COLORS[$l]=''; done
log() {
  local msg="$1"
  local lvl="${2:-INFO}"
  [[ ${LOG_LEVELS[$LOG_LEVEL]} -le ${LOG_LEVELS[$lvl]} ]] && printf "${LOG_COLORS[$lvl]}[%-5s] %s${LOG_COLORS['OFF']}\n" "$lvl" "${msg}" 1>&2
}
log.debug() { log "${1}" "DEBUG"; }
log.info() { log "${1}" "INFO"; }
log.warn() { log "${1}" "WARN"; }
log.error() { log "${1}" "ERROR"; }
log.fatal() { log "${1}" "FATAL"; }
# END: Logging variables and functions

precommit_install() {
  if on_git_branch; then
    if [[ -f .pre-commit-config.yaml ]]; then
      if ! [ -x "$(command -v pre-commit)" ]; then
        log.error 'Found .pre-commit-config.yaml but pre-commit is not installed.'
      else
        log.info "Found a .pre-commit-config.yaml file. Installing pre-commit hooks"
        pre-commit install
        pre-commit autoupdate
      fi
    fi
  fi
}

create_venv() {
  if [[ -d "${MY_VENV_DIR}" ]]; then
    log.info "Virtualenv dir exists: ${MY_VENV_DIR}"
    source "${MY_VENV_DIR}/bin/activate"
  else
    if [[ -f "${CUR_DIR}/tox.ini" ]]; then
      log.info "Found tox.ini file.  Skipping venv creation since that is handled by tox."
      return
    fi
    log.info "Creating virtualenv dir: ${MY_VENV_DIR}"
    if ! command -v python3.11 > /dev/null; then
      log.error "No python3.11 in the path. No virtualenv will be created."
      return
    fi
    mkdir -p "${MY_VENV_DIR}"
    python3.11 -m venv "${MY_VENV_DIR}"
    log.info "Activating virtualenv: ${MY_VENV_DIR}/bin/activate"
    source "${MY_VENV_DIR}/bin/activate"
    log.info "Upgrading pip"
    pip3 install pip --upgrade
    if [[ -f "${MY_PROJECT_DIR}/requirements-dev.txt" ]]; then
      log.info "Found requirements-dev.txt. Installing pip packages..."
      pip install -r requirements-dev.txt
    elif [[ -f "${MY_PROJECT_DIR}/requirements.txt" ]]; then
      log.info "Found requirements.txt. Installing pip packages..."
      pip install -r requirements.txt
    fi
    precommit_install
  fi
}

main() {
  dotenv_if_exists .env
  if [[ $MY_VENV_ENABLE -eq 1 ]]; then
    create_venv
  else
    log.info "Automatic venv creation/activation is disabled. Skipping venv"
  fi
}

main
