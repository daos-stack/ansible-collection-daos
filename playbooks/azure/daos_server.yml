---
- name: daos_server | Install and configure DAOS server
  hosts: "{{ target | default('localhost') }}"
  gather_facts: true

  vars:
    subscription: "{{ subscription | default(lookup('env', 'DAOS_AZ_CORE_ACCT_NAME')) | default('daos-rg') }}"
    group_name: "{{ group_name | default(lookup('env', 'DAOS_AZ_CORE_RG_NAME')) | default('daos-rg') }}"
    location: "{{ location | default(lookup('env', 'DAOS_AZ_CORE_LOCATION_NAME')) | default('') }}"
    vmss_name: "{{ vmss_name | default(lookup('env', 'DAOS_AZ_ARM_SERVER_VMSS_NAME')) | default('daos-server-vmss') }}"
    vmss_max_retries: 90
    vmss_polling_interval: 10
    vault_name: "{{ vault_name | default(lookup('env', 'DAOS_AZ_ARM_KEY_VAULT_NAME')) | default('demnfr4cxad3k-daos-kv') }}"

  tasks:
    - name: daos_server | Import selinux role
      import_role:
        name: daos_stack.daos.selinux

    - name: daos_server | Import packages role
      import_role:
        name: daos_stack.daos.packages

    - name: daos_server | Import tune role
      import_role:
        name: daos_stack.daos.tune

    - name: daos_server | Import azurecli role
      import_role:
        name: daos_stack.daos.azurecli
      vars:
        azurecli_do_login: true
        azurecli_login_method: "identity"
        azurecli_default_subscription: "{{ subscription }}"
        azurecli_default_group: "{{ group_name }}"
        azurecli_default_location: "{{ location }}"

    - name: daos_server | Get VMSS daos_server_vmss_info_debug
      azure.azcollection.azure_rm_virtualmachinescaleset_info:
        resource_group: "{{ group_name }}"
        name: "{{ vmss_name }}"
      register: daos_server_vmss_info_debug

    - name: daos_server | Wait until VMSS provisioning state is Succeeded
      azure.azcollection.azure_rm_virtualmachinescaleset_info:
        resource_group: "{{ group_name }}"
        name: "{{ vmss_name }}"
      register: daos_server_vmss_info
      retries: "{{ vmss_max_retries }}"
      delay: "{{ vmss_polling_interval }}"
      until: daos_server_vmss_info.vmss[0].provisioning_state == "Succeeded"

    - name: daos_server | Retrieve VM instances in VMSS
      azure.azcollection.azure_rm_virtualmachinescalesetinstance_info:
        resource_group: "{{ group_name }}"
        vmss_name: "{{ vmss_name }}"
      register: daos_server_vmss_instance_info

    - name: daos_server | Get bdev addresses
      ansible.builtin.shell: "lspci | grep 'Non-Volatile memory controller' | awk '{print $1}'"
      register: daos_server_lspci_output
      changed_when: false

    - name: daos_server | Add localhost to the inventory groups
      add_host:
        name: localhost
        groups: "{{ item }}"
      loop:
        - daos_admins
        - daos_servers
      delegate_to: localhost
      run_once: true
      changed_when: false

    - name: daos_server | Import daos role
      import_role:
        name: daos_stack.daos.daos
      vars:
        daos_roles:
          - admin
          - server
        daos_deploy_certs: false
        daos_do_install: true
        daos_do_configuration: true
        daos_do_cert_gen: false
        daos_do_storage_format: false
        daos_do_storage_management: false
        daos_do_start_services: false
        daos_server_user: root
        daos_transport_config_allow_insecure: false
        daos_server_bdev_list: '{{ daos_server_lspci_output.stdout_lines }}'
        daos_server_first_host_name: "{{ daos_server_vmss_instance_info.instances[0].computer_name }}"
        daos_server_host_list: "{{ daos_server_vmss_instance_info.instances | map(attribute='computer_name') | list }}"
        daos_access_points: "{{ daos_server_vmss_instance_info.instances | map(attribute='computer_name') | list | daos_stack.daos.daos_access_points }}"
        daos_server_engines:
          - targets: 2
            nr_xs_helpers: 4
            bypass_health_chk: "true"
            fabric_iface: "{{ ansible_default_ipv4.interface }}"
            fabric_iface_port: 31316
            log_mask: ERR
            log_file: "{{ daos_server_log_dir }}/daos_engine.0.log"
            env_vars:
              - "FI_OFI_RXM_DEF_TCP_WAIT_OBJ=pollfd"
              - "DTX_AGG_THD_CNT=16777216"
              - "DTX_AGG_THD_AGE=700"
            storage:
              - scm_mount: /var/daos/ram
                class: ram
              - class: nvme
                bdev_list: "{{ daos_server_bdev_list | to_json }}"

    - name: daos_server | Import daos_certs role
      import_role:
        name: daos_certs
      vars:
        daos_certs_store_type: azure_key_vault
        daos_certs_az_vault_name: "{{ vault_name }}"
        daos_certs_generate: "{{ ansible_hostname == daos_server_first_host_name }}"
        daos_certs_store_push_enabled: "{{ ansible_hostname == daos_server_first_host_name }}"
        daos_certs_store_pull_enabled: true

    - name: daos_server | Import daos_storage role
      import_role:
        name: daos_stack.daos.daos_storage
      vars:
        daos_storage_server_host_list: "{{ daos_server_vmss_instance_info.instances }}"
        daos_storage_do_format: true
        daos_storage_do_management: "{{ ansible_hostname == daos_server_first_host_name }}"
        daos_pools:
          - label: pool1
            size: '100%'
            user: root
            group: root
            acls:
              - "A::EVERYONE@:rcta"
            properties: []
            containers: []
